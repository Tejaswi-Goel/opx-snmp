#!/usr/bin/python

from pysnmp.entity import engine, config
from pysnmp import debug
from pysnmp.entity.rfc3413 import cmdrsp, context, ntforg
from pysnmp.carrier.asynsock.dgram import udp
from pysnmp.smi import builder,view, error
from pysnmp.proto.api import v2c
from pysnmp.proto.rfc1902 import Integer
from pysnmp.hlapi import ObjectIdentity

import struct
import sys
import os

# Add MIB handlers here ...
import opx_snmp.if_handlers as ifh


# handler functions dictionary
agent_handlers = {}

'''
Load compiled mibs, in order to export symbols to pysnmp libraries. Currently, only IF-MIB 
is supported.  To be enhanced in future to compile and load any number of MIBs
'''

# Where (compiled) MIBs are kept
mibdir = '/usr/lib/python2.7/dist-packages/opx_snmp'

def loadMibs(mibBuilder, CustomMibTableColumn):
	g = {'mibBuilder': mibBuilder, 'CustomMibTableColumn': CustomMibTableColumn}
        # There should be a better way to do this...
        for mib in ['IF-MIB.py']:
                execfile(os.path.abspath(mibdir + '/' + mib), g)

class SNMPAgent():
    """Implements an Agent that serves MIBs
    """

    def __init__(self):

        #each SNMP-based application has an engine
        self._snmpEngine = engine.SnmpEngine()

        #open a UDP socket to listen for snmp requests
        config.addSocketTransport(self._snmpEngine, udp.domainName,
                                  udp.UdpTransport().openServerMode(('', 161)))

        #add a v2 user with the community string public
        config.addV1System(self._snmpEngine, "agent", "public")
        #let anyone accessing 'public' read anything in the subtree below,
        config.addVacmUser(self._snmpEngine, 1, "agent", "noAuthNoPriv",
                           readSubTree=(1,3,6,1,2,1))
        config.addVacmUser(self._snmpEngine, 2, "agent", "noAuthNoPriv",
                           readSubTree=(1,3,6,1,2,1))

        #each app has one or more contexts
        self._snmpContext = context.SnmpContext(self._snmpEngine)

        #the builder is used to load mibs. 
 	mibInstrumentation = self._snmpContext.getMibInstrum()
        mibBuilder = mibInstrumentation.getMibBuilder()
	mibSources = mibBuilder.getMibSources() + (builder.DirMibSource(mibdir),)
	mibBuilder.setMibSources(*mibSources)

	mibView = view.MibViewController(mibBuilder)

        #our variables will subclass this since we only have table types
        #can't load this type directly, need to import it

	(MibTable,
 	MibTableRow,
 	MibTableColumn,
 	MibScalarInstance) = mibBuilder.importSymbols(
    	'SNMPv2-SMI',
    	'MibTable',
    	'MibTableRow',
    	'MibTableColumn',
    	'MibScalarInstance'
	)

	class CustomMibTableColumn(MibTableColumn):
		def __init__(self, name, syntax):
			MibTableColumn.__init__(self,name,syntax)

		def readGet(self, name, val, idx, acInfo):
			oi = ObjectIdentity(name)
			oi.resolveWithMib(mibView)
			module = oi.getMibSymbol()

			handler_key = module[0:2]
			if (not all(module)):
				raise error.NoSuchInstanceError(name=name)	
			else:
                                if handler_key not in agent_handlers:
					raise error.NoSuchObjectError(name=name)

				ret = agent_handlers[handler_key][0](module[0],name)
				if ret is None:
					raise error.NoSuchInstanceError(name=name)	
				else:
					return ret


		def readGetNext(self, name, val, idx, acInfo, oName=None):
			oi = ObjectIdentity(name)
			oi.resolveWithMib(mibView)
			module = oi.getMibSymbol()

			handler_key = module[0:2]

                        if handler_key not in agent_handlers:
                                raise error.NoSuchObjectError(name=name)

			if (not all(module)):
				ret = agent_handlers[handler_key][1](module[0],name)
			else:
				ret = agent_handlers[handler_key][2](module[0],name)
			
			if ret is None:
				raise error.NoSuchInstanceError(name=name)	
			else:
				return ret
				
	# load compiled mibs
	loadMibs(mibBuilder, CustomMibTableColumn)
	# load handlers
	for h in ifh.handlers:
		agent_handlers[h[0]] = h[1]

        # tell pysnmp to respotd to get, getnext, and getbulk
        cmdrsp.GetCommandResponder(self._snmpEngine, self._snmpContext)
        cmdrsp.NextCommandResponder(self._snmpEngine, self._snmpContext)
        cmdrsp.BulkCommandResponder(self._snmpEngine, self._snmpContext)

    def serve_forever(self):
        print "Starting agent"
        self._snmpEngine.transportDispatcher.jobStarted(1)
        try:
           self._snmpEngine.transportDispatcher.runDispatcher()
        except:
            self._snmpEngine.transportDispatcher.closeDispatcher()
            raise

if __name__ == '__main__':
    agent = SNMPAgent()
    try:
        agent.serve_forever()
    except KeyboardInterrupt:
        print "Shutting down"
